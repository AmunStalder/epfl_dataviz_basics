---
title: "Applied Data Science: Communication and Visualisation"
author: "Amun Stalder"
date: "25.04.2024"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---
```{r setup, include=FALSE}
#| warning: false
```

# Introduction
As part of the *Applied Data Science: Communication and Visualisation* course for
the Certificate of Open Studies (COS) of the EPFL, the students show their aquired skills
in small data science projects. This Markdown file is about the analysis of the
SMI data set, which contains data about the stock market. There were 10 tasks to
analyse this data set and visualize the results obtained from the analysis.

# Analysing the data
## Loading the data
Firstly, we load the data using the {readr} package. We then take a look at
the individual columns and transform them if needed.

```{r}
#| warning: false

library(readr)
library(dplyr)

df_smi_raw <- read_csv("data/data_smi.csv", show_col_types = FALSE)

glimpse(df_smi_raw)
```
The data frame has 2 columns and 1336 rows.The date column seems to be a string,
so let's convert it to a date format using {lubridate}.

```{r}
#| warning: false

library(lubridate)

df_smi <- df_smi_raw |>
  mutate(date = dmy(date))
  
glimpse(df_smi)
```
The columns are now in a format we can use. To check missing values, we can use the
{visdat} package:
```{r}
#| warning: false
#| 
library(visdat)

visdat::vis_dat(df_smi)

```
The data does not have any missing values.

## Task 1: Generating a lineplot
```{r}
#| warning: false

library(ggplot2)

plot_smi_line <-
  function(df,
           date_breaks = "1 year",
           angle = FALSE,
           hline = FALSE) {
    checkmate::assert_data_frame(df)
    checkmate::assert_character(date_breaks)
    checkmate::assert_logical(angle)
    checkmate::assert_logical(hline)
    
    date_from = format(min(df$date), "%d %b %Y")
    date_to = format(max(df$date), "%d %b %Y")
    
    p <- df |>
      ggplot(aes(x = date, y = price)) +
      geom_line(color = "darkgreen") +
      labs(
        title = "Daily SMI prices",
        subtitle = paste0("From ", date_from, " to ", date_to),
        x = "Date",
        y = "Daily Prices"
      ) +
      theme_minimal() +
      scale_y_continuous(
        breaks = seq(0, 12000, 2000),
        limits = c(0, max(df$price) * 1.2),
        minor_breaks = NULL
      ) +
      scale_x_date(
        date_breaks = date_breaks,
        date_labels = case_when(date_breaks == "1 year" ~ "%Y",
                                date_breaks == "1 month" ~ "%b %y") ,
        minor_breaks = NULL
      ) +
      theme(legend.position = "none")
    if (angle) {
      p = p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
    }
    if (hline) {
      p = p + geom_hline(yintercept = 8900,
                         color = "red",
                         size = 1)
    }
    return(p)
  }

plot_smi_line(df_smi)
```

## Task 2: Generating a lineplot from 2019 on
```{r}
df_smi_2019 <- df_smi |> filter(date > "2018-12-31")
plot_smi_line(df_smi_2019, date_breaks = "1 month", angle = TRUE)
```
## Task 3: Adding a horizontal line at 8900.-
```{r}
p_2019_hline <- plot_smi_line(df_smi_2019, date_breaks = "1 month", angle = TRUE, hline = TRUE)
p_2019_hline
```

## Task 4: Adding ggplotly functionality for interactivity.
Additionally, we search for the the date in 2019 for which the SMI value was below 
CHF 8900 for the last time of the year. Then, find the date in 2020 for which the 
SMI value was below CHF 8900 for the first time of the year.

```{r}
#| warning: false

library(plotly)

ggplotly(p_2019_hline)
```
The values are depicted here:

::: {#fig-under_8900 layout-ncol=2}

![Last value below 8900.- in 2019](data/last_value_2019.png){#2019}

![First value below 8900.- in 2020](data/first_value_2020.png){#2020}

Screenshots of last and first values below 8900.- in 2019 and 2020, respectively.
:::

## Task 5: Finding the two dates using code
Since we are Data Scientists, we can automate this task and print the results.
```{r}
#| warning: false

get_date_below_price <-
  function(df,
           year,
           first_or_last = "first",
           price_threshold = 8900) {
    checkmate::assert_data_frame(df)
    checkmate::assert_int(year)
    checkmate::assert_numeric(price_threshold)
    checkmate::assert_character(first_or_last)
    
    found_dates <- df |>
      mutate(year_extracted = year(date)) |>
      filter(year_extracted == year, price < price_threshold) |>
      arrange(date) |>
      select(date)
    if (first_or_last == "first") {
      found_date <- found_dates |>
        first() |>
        pull()
    } else if (first_or_last == "last") {
      found_date <- found_dates |>
        last() |>
        pull()
    }
    return(found_date)
  }

last_2019 <-
  get_date_below_price(df_smi, 2019, first_or_last = "last")
first_2020 <- get_date_below_price(df_smi, 2020)

```

The last date with a price below 8900.- in 2019 was `r last_2019`.<br>
The first date with a price bewlo 8900.- in 2020 was `r first_2020`.

## Task 6: Calculating the number of days between `r last_2019` and `r first_2020`
```{r}
number_of_days_diff <- first_2020 - last_2019
```
The Dirrerence is `r number_of_days_diff` days.

## Task 7: Weekly means as Scatter Plot

```{r}
#| warning: false


library(tsibble)

df_smi_2019 <- df_smi_2019 |>
  mutate(week = tsibble::yearweek(date),
         month = tsibble::yearmonth(date))

df_smi_wkly <- df_smi_2019 |>
  group_by(week) |>
  summarize(wkly_means = mean(price)) |>
  ungroup()

plot_weekly_smi_means <- df_smi_wkly %>%
  ggplot(aes(x = week, y = wkly_means)) +
  geom_point(color = "blue") +
  labs(title = "Weekly SMI mean prices",
       x = "Date",
       y = "Weekly mean prices") +
  theme_minimal() +
  scale_y_continuous(
    breaks = seq(6000, 12000, 1000),
    limits = c(6000, max(df_smi_wkly$wkly_means) * 1.2),
    minor_breaks = NULL
  ) +
  theme(legend.position = "none")
plot_weekly_smi_means
```

## Task 8: Adding Daily values to weekly plot
```{r}
#| warning: false

plot_weekly_daily_smi <- plot_weekly_smi_means +
  geom_point(
    data = df_smi_2019,
    aes(x = week, y = price),
    alpha = 0.3,
    color = "pink",
    size = 1
  )

plot_weekly_daily_smi

```


## Task 9: Monthly means as Scatter Plot
```{r}


df_smi_monthly <- df_smi_2019 |>
  group_by(month) |>
  summarize(monthly_means = mean(price)) |>
  ungroup()

plot_monthly_smi_means <- df_smi_monthly %>%
  ggplot(aes(x = month, y = monthly_means)) +
  geom_point(color = "blue") +
  labs(title = "Monthly SMI mean prices",
       x = "Date",
       y = "Monthly mean prices") +
  theme_minimal() +
  scale_y_continuous(
    breaks = seq(6000, 12000, 1000),
    limits = c(6000, max(df_smi_monthly$monthly_means) * 1.2),
    minor_breaks = NULL
  ) +
  theme(legend.position = "none")
plot_monthly_smi_means

```

## Task 10: Adding Daily values to monthly plot
```{r}
#| warning: false

plot_monthly_daily_smi <- plot_monthly_smi_means +
  geom_point(
    data = df_smi_2019,
    aes(x = month, y = price),
    alpha = 0.3,
    color = "pink",
    size = 1
  )

plot_monthly_daily_smi

```

## Task 11: Displaying distributions with boxplots
```{r}
library(forcats)
df_smi_2019 <- df_smi_2019 %>%
  arrange(date) %>%
  mutate(month_fct = as.factor(month),
         month_fct = fct_inorder(month_fct))

boxplot_smi <- df_smi_2019 %>% #TODO: Convert all pipes to "|>"
  ggplot(aes(x = month_fct, y = price, fill = month_fct)) +
  geom_boxplot() +
  labs(title = "Distribution of SMI Prices per month",
       x = "Date",
       y = "price") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

boxplot_smi

```

#Task 12: Bitcoin investments
How rich would I be on the 1st of April, 2024 if I had invested 1000$ ever first 
day of every month for thelast 10 years?

## Importing data
Data obtained from https://finance.yahoo.com/quote/BTC-USD/history?period1=1410912000&period2=1714136620
Downloaded on the 26.04.2024
```{r}
df_btc_usd <- read_csv("data/BTC-USD.csv") %>% janitor::clean_names()

glimpse(df_btc_usd)
```
We can see, that there are 4 values provided. For simplicity, we'll take the
mean of them and plot the result as `geom_line`.

```{r}
df_btc_usd <- df_btc_usd %>%
  rowwise() %>% 
  mutate(daily_mean = mean(c(open, high, low, close)))

plot_btc <- df_btc_usd %>% 
  ggplot(aes(x=date, y = daily_mean)) +
  geom_line(color = "lightblue") +
  labs(
    title = "Historic Bitcoin data",
    x = "Date",
    y = "Price [USD]"
  ) +
  theme_minimal()
plot_btc
```
Now, lets filter the mean value of the 1st of every month and calculate how much
we would get for our 1000$.

```{r}
df_btc_usd_1st <- df_btc_usd %>%
  filter(date > "2014-03-31", date < "2024-04-02") %>%
  mutate(month = yearmonth(date)) %>%
  arrange(date) %>%
  group_by(month) %>%
  mutate(rn = row_number()) %>%
  ungroup() %>%
  filter(rn == 1) %>%
  mutate(
    bought_btc = 1000 / daily_mean,
    cumsum_bought_btc = cumsum(bought_btc),
    cumsum_earnings = (cumsum_bought_btc * daily_mean)/1000000
  )

plot_btc <- df_btc_usd_1st %>% 
  ggplot(aes(x = date, cumsum_earnings)) +
  geom_line(color = "gold") +
  theme_minimal() +
    labs(
    title = "Bitcoin amount in hypothetical wallet",
    x = "Date",
    y = "USD [Mio]"
  ) +
  scale_y_continuous(
    breaks = seq(0, 7, 0.5),
    minor_breaks = NULL
  )

ggplotly(plot_btc)
```
This insight is extremely depressing.
