---
title: "Applied Data Science: Communication and Visualisation - Project 1.3"
author: "Amun Stalder"
date: "2024-04-29"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---
```{r setup, include=FALSE}
#| warning: false
```

# Introduction to the Cartography Project
As part of the *Applied Data Science: Communication and Visualisation* course for
the Certificate of Open Studies (COS) of the EPFL, the students show their acquired skills
in small data science projects. This markdown file is about the analysis cartography data.

# Analysing the data
## Task 1: Loading the data and inspecting a first graph
Firstly, we load the data using the {readxl} package. We make an initial data-wrangling
in order to bring it in a useful format for plotting. The Excel file is not very 
clean in the sense of a proper data frame, and therefore some tests are added in 
order to identify whether what we see in the Excel file is also what we get in the R
data frame,

```{r}
#| warning: false
library(dplyr)
library(readxl)
library(stringr)
library(tidyr)
library(testthat)

# to drop wrong values because of the legend in the excel
drop_list <- c("Special value",
               ":",
               "Available flags:",
               "b",
               "e")

df_gap <-
  read_excel("data/employment_gap.xlsx",
             sheet = 3,
             skip = 9)

df_gap_longer <- df_gap %>%
  select(-starts_with("...")) %>% # dropping useless cols
  filter(time != "geo (Labels)") %>%
  rename(id = time) %>%
  pivot_longer(cols = starts_with("20"),
               names_to = "time",
               values_to = "gap") %>%
  filter(!(id %in% drop_list)) %>%
  mutate(gap = as.numeric(gap), # here, the ":" is converted to "NA"
         gap = round(gap, 2),
         time = as.numeric(time))

# Adding some unit-tests:
test_that(
  "Amount of NA in gap should be 59",
  expect_equal(df_gap_longer %>%
                 filter(is.na(gap)) %>%
                 count() %>%
                 pull(),
               59)
)
test_that("Smallest year should be 2005, largest 2018",
          expect_equal(
            min(df_gap_longer$time) == 2005,
            max(df_gap_longer$time) == 2018
          ))

df_gap_longer <- df_gap_longer %>%
  filter(!is.na(gap)) # Two contries will be dropped here, hence from 41 to 39

test_that(
  "Distinct number of countries should be 38 after removing Albania and LI",
  expect_equal(
    df_gap_longer %>%
      select(id) %>%
      distinct() %>%
      count() %>%
      pull(),
    39
  )
)

glimpse(df_gap_longer)
```
Now let's develop a graph similar to the one shown on the course website:
```{r}
#| warning: false
library(ggplot2)
library(ggtext)
library(geomtextpath)
library(ggrepel)

df_gap_longer_top_12 <- df_gap_longer %>%
  arrange(time) %>% 
  group_by(id) %>% #identify the last entry (top 12 will be scored by last entry)
  mutate(rn_last = row_number(),
         is_last = ifelse(rn_last == max(rn_last), TRUE, FALSE)) %>% 
  ungroup() %>%
  arrange(desc(gap)) %>% # find the 12 highest last values in last entries
  group_by(is_last) %>% 
  mutate(rn = row_number(),
         is_top_12 = ifelse(is_last == TRUE & rn %>% between(1, 12), TRUE, FALSE),
         id = forcats::fct_inorder(id)) %>% 
  select(-rn,-rn_last) %>% 
  ungroup() %>% 
  group_by(id) %>% # Make the whole group true 
  mutate(is_top_12 = any(is_top_12)) %>%
  ungroup()


ggplot(mapping = aes(x = time, y = gap, group = id)) +
  geom_line(data = df_gap_longer_top_12,
            color = "grey", alpha = 0.5) +
  geom_line(data = df_gap_longer_top_12 %>% filter(is_top_12),
            mapping = aes(color = id, y = gap)) +
  geom_text_repel(data = df_gap_longer_top_12 %>%
                    filter(is_top_12, is_last),
                   aes(label = id, color = id),
                   size = 3,
                   box.padding = 0.3,
                   point.padding = 0.3,
                   segment.size = 0.2, force = 20) +
  scale_color_brewer(palette = "Paired") +
  labs(
    title= "Gender employment gap",
    subtitle= "Annual difference between the employment rates of men and women aged 30-64",
    x = "Year",
    y = "Percentage of total population",
    caption = "Source: Eurostat"
  ) +
  hrbrthemes::theme_ipsum() +
  theme(legend.position = "none")

```
## Task 2: Highlighting France
We now highlight France with blue color
```{r}
#| warning: false
ggplot(mapping = aes(x = time, y = gap, group = id)) +
  geom_line(data = df_gap_longer_top_12,
            color = "grey", alpha = 0.5) +
  geom_line(data = df_gap_longer_top_12 %>% filter(id == "France (metropolitan)"),
            color = "blue") +
  labs(
    title= "Gender employment ga in France and other EU countries",
    subtitle= "Annual difference between the employment rates of men and women aged 30-64",
    x = "Year",
    y = "Percentage of total population",
    caption = "Source: Eurostat"
  ) +
  hrbrthemes::theme_ipsum() +
  theme(legend.position = "none")
```
## Task 3: Plotting the data on a map
We'll use the {sf} package for that. Let's first try to load the map data from 
`naturalearth`.
```{r}
#| warning: false
#| echo: false

library(rnaturalearth)
library(sf)

world <- ne_countries(scale = "medium", returnclass = "sf")
#world <- st_read("data/ne_110m_admin_0_countries.shp", quiet=TRUE)

ggplot() +
  geom_sf(data = world) +
  theme_void()

```
This seems to work well. Now, let's zoom to Europe:
```{r}

ggplot() +
  geom_sf(data = world) +
  theme_void() +
    coord_sf(
    xlim = c(-25, 40),
    ylim = c(30, 70)    
  )
```
That doesn't look too bad. Let's add the data of the year 2018
```{r}
gap_2018 <- df_gap_longer_top_12 %>% 
  filter(time == 2018)

europe_with_gap_data <- world %>% 
  left_join(gap_2018, join_by(sovereignt == id))

ggplot() +
  geom_sf(
    data = europe_with_gap_data,
    mapping = aes(fill = gap)) +
  theme_void() +
    coord_sf(
    xlim = c(-25, 40),
    ylim = c(30, 70)    
  )
```
It seems, that there is some missing data (e.g. Germany). The most likely cause 
is that there were some mismatches between `sovereignt` and `id`. Let's check it out:
```{r}
gap_2018 %>%
  select(id) %>%
  distinct() %>%
  left_join(world, join_by(id == sovereignt)) %>% 
  filter(is.na(name)) %>% 
  select(id, name)
```
When inspecting these values, we have to change some names in the `id` column.
Next, we'll plot the data again
```{r}
gap_2018_renamed <- gap_2018 %>% 
  filter(id != "France") %>% # We'll keep the "France (metropolitan)" one
  mutate( id = case_when(
    #id == "North Macedonia" ~ "Macedonia",
    id == "Serbia" ~ "Republic of Serbia",
    id == "Germany (until 1990 former territory of the FRG)" ~ "Germany",
    id == "France (metropolitan)" ~ "France",
    TRUE ~ id
  ))

europe_with_gap_data <- world %>% 
  left_join(gap_2018_renamed, join_by(sovereignt == id))

ggplot() +
  geom_sf(
    data = europe_with_gap_data,
    mapping = aes(fill = gap)) +
  theme_void() +
    coord_sf(
    xlim = c(-25, 40),
    ylim = c(30, 70)    
  ) +
  theme(legend.title = element_blank()) +
  labs(title = "Gender employment gap in Europe",
       subtitle = "Annual difference between the employment rates of men and women agen 20-64",
       caption = "Source: Eurostat")
```
## Task 4: Making a Choropleth
To visualise 4 categories of employment gap, we use the quantile and cut function
to get 4 bins with about even number of countries per bin.

```{r}

bins <- round(quantile(gap_2018_renamed$gap, c(0, 0.25, 0.5, 0.75, 1)),0)

get_labels_from_bins <- function(bins) {
  checkmate::assert_vector(bins)
  labels <-
    tibble(
      lab1 = bins,
      lab2 = c(bins[2:length(bins)], NA)
    ) %>%
    slice(1:n() - 1) %>% 
    mutate_all(round, digits = 0) %>%
    mutate_all(paste0, "%") %>% 
    mutate(labs = paste(lab1, lab2, sep = " -"))
  return(labels$labs)
}


gap_2018_with_categ <- gap_2018_renamed %>%
  arrange(gap) %>% 
  mutate(
    bin = cut(gap, breaks = bins, labels = get_labels_from_bins(bins), right = TRUE),
    bin = forcats::fct_inorder(bin)
  )
europe_with_gap_data <- world %>% 
  left_join(gap_2018_with_categ, join_by(sovereignt == id))

ggplot() +
  geom_sf(
    data = europe_with_gap_data,
    mapping = aes(fill = bin)) +
  theme_void() +
    coord_sf(
    xlim = c(-25, 40),
    ylim = c(30, 70)    
  ) +
  theme(legend.title = element_blank()) +
  labs(title = "Gender employment gap in Europe",
       subtitle = "Annual difference between the employment rates of men and women agen 20-64",
       caption = "Source: Eurostat")+
  scale_fill_brewer(palette = "RdYlGn",direction = 1)

```
#Task 5: Annotating the map

```{r}
#| warning: false

# getting the central location per country for the geom_text
europe_with_gap_data$centroid <- st_centroid(europe_with_gap_data$geometry)

ggplot() +
  geom_sf(data = europe_with_gap_data,
          mapping = aes(fill = bin)) +
  theme_void() +
  coord_sf(xlim = c(-25, 40),
           ylim = c(30, 70)) +
  theme(legend.title = element_blank()) +
  labs(title = "Gender employment gap in Europe",
       subtitle = "Annual difference between the employment rates of men and women agen 20-64",
       caption = "Source: Eurostat") +
  scale_fill_brewer(palette = "RdYlGn", direction = -1) +
  geom_text(data = europe_with_gap_data,
            aes(label = round(gap,0),
                x = st_coordinates(centroid)[, "X"],
                y = st_coordinates(centroid)[, "Y"]),
            size = 3,
            color = "blue",
            check_overlap = TRUE)

```

```{r}
# Load required packages
library(rnaturalearth)
library(ggplot2)
library(sf)

# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Calculate centroids of countries
world$centroid <- st_centroid(world$geometry)

# Plot the map
ggplot() +
  geom_sf(data = world) +
  geom_text(data = world, aes(label = name, x = st_coordinates(centroid)[, "X"], y = st_coordinates(centroid)[, "Y"]), size = 2, check_overlap = TRUE) +
  theme_void()

```
